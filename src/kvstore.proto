syntax = "proto3";

package kvstore;

service KeyValueStore {
    //ClientQuery RPC
    rpc Get(GetRequest) returns (GetResponse) {}
    //ClientRequest RPC
    rpc Put(PutRequest) returns (PutResponse) {}
    rpc registerClient(RegisterRequest) returns (RegisterResponse){}
    rpc clientRequest (ClientRequest) returns (ClientRequestResponse) {}
    rpc clientQuery (ClientQuery) returns (ClientQueryResponse) {}
    rpc appendEntries(AppendRequest) returns (AppendResponse) {}
    rpc requestVote(VoteRequest) returns(VoteResponse){}
//    rpc inspectServState(InspectRequest) returns(InspectResponse){}
}

enum ReturnCode {
    SUCCESS = 0;
    FAILURE = 1;
}

enum ClientRPCStatus{
    NOT_LEADER = 0;
    SESSION_EXPIRED = 1;
    OK2CLIENT = 2;
    ERROR2CLIENT = 3;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    string value = 1;
    ClientRPCStatus status = 2;
    int32 leaderHint = 3;
}

message PutRequest {
    string key = 1;
    string value = 2;
    int32 clientID = 3;
    int32 sequenceNum = 4;
}

message PutResponse {
    ClientRPCStatus status = 1;
    string response = 2;
    int32 leaderHint = 3;
}

message RegisterRequest{
}

message RegisterResponse{
    ClientRPCStatus status = 1;
    int32 clientID = 2;
    int32 leaderHint = 3;
}

message KVSet{
    string key = 1;
    string value = 2;
}

message ClientRequest{
    int32 clientID = 1;
    int32 sequenceNum = 2;
    //Assume command to be list consisting of [key, value]
    repeated KVSet command = 3;
}

message ClientRequestResponse{
    ClientRPCStatus status = 1;
    //Todo: state machine output, if successful?
    repeated KVSet response = 2;
    int32 leaderHint = 3;
}

message Key{
    string key = 1;
}

message ClientQuery{
    repeated Key query = 1;
}

message ClientQueryResponse{
    ClientRPCStatus status = 1;
    repeated KVSet response = 2;
    int32 leaderHint = 3;
}

message LogEntry {
    int32 term=1;
    string key =2;
    string val =3;
}

message AppendRequest {
    int32 term = 1;
    int32 leaderID = 2;
    int32 prevLogIndex = 3;
    int32 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    int32 leaderCommit = 6;
}

message AppendResponse {
    int32 term = 1;
    bool success = 2;
}

message VoteRequest{
    int32 term = 1;
    int32 candidateID = 2;
    int32 lastLogIndex = 3;
    int32 lastLogTerm = 4;
}

message VoteResponse{
    int32 serverID = 1;
    int32 term = 2;
    int32 lastLogIndex = 3;
    int32 lastCommitIndex = 4;
    bool voteGranted = 5;
}

//message InspectRequest{
//}
//
//message InspectResponse{
//    int32 requestTimeout = 1;
//    int32 electionTimeout = 2;
//    int32 id = 3;
//    int32 role = 4;
//    int32 leader = 5;
//    int32 commitIndex = 6;
//    int32 lastApplied = 7;
//    int32 lastLogIndex = 8;
//    int32 lastLogTerm = 9;
//}